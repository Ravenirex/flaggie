#!/usr/bin/python
#	vim:fileencoding=utf-8
# (C) 2010 Michał Górny <gentoo@mgorny.alt.pl>
# Released under the terms of the 3-clause BSD license.

PV = '0.1'

import codecs, glob, sys, os.path
from optparse import OptionParser
import portage
from portage.dbapi.dep_expand import dep_expand

def print_help(option, arg, val, parser):
	class PseudoOption:
		def __init__(self, opt, help):
			parser.formatter.option_strings[self] = opt
			self.help = help
			self.dest = ''

	parser.print_help()
	print('''
Actions:''')

	actions = [
		('+flag', 'explicitly enable flag'),
		('-flag', 'explicitly disable flag'),
		('%flag', 'reset flag to the default state (remove it completely)'),
		('%', 'reset all package flags to the default state (drop the package from package.use)'),
		('?flag', 'print the status of a particular flag'),
		('?', 'print package flags')
	]

	parser.formatter.indent()
	for a,b in actions:
		sys.stdout.write(parser.formatter.format_option(PseudoOption(a, b)))
	parser.formatter.dedent()
	sys.exit(0)

class ParserError(Exception):
	pass

class PackageFileSet:
	class PackageFile(list):
		class Whitespace(object):
			def __init__(self, l):
				self.data = l

			def toString(self):
				return self.data

			@property
			def modified(self):
				return False

			@modified.setter
			def setmodified(self, newval):
				pass

		class InvalidPackageEntry(Exception):
			pass

		class PackageEntry:
			class PackageFlag:
				def __init__(self, s):
					if s[0] in ('-', '+'):
						self.modifier = s[0]
						self.name = s[1:]
					else:
						self.modifier = ''
						self.name = s

				def toString(self):
					return '%s%s' % (self.modifier, self.name)

			def __init__(self, l):
				sl = l.split()
				if not sl or sl[0].startswith('#'): # whitespace
					raise self.InvalidPackageEntry()

				self.as_str = l
				self.modified = False
				self.package = sl.pop(0)
				self.flags = [self.PackageFlag(x) for x in sl]

			def toString(self):
				if not self.modified:
					return self.as_str
				else:
					return ' '.join([self.package] + \
							[x.toString() for x in self.flags]) + '\n'

			class DynamicPackageFlags(object):
				""" A class representing a set of flags in a package
					entry. """
				def __init__(self, flag = None, parent = None):
					self.flag = flag
					self.parent = parent

				def __iter__(self):
					for f in reversed(self.parent.flags):
						if self.flag is None or self.flag == f.name:
							yield f

			def append(self, flag):
				if not isinstance(flag, self.PackageFlag):
					flag = self.PackageFlag(flag)
				self.flags.append(flag)
				self.modified = True
				return flag

			def __iter__(self):
				""" Iterate over all flags in the entry. """
				return self.DynamicPackageFlags(parent = self)

			def __getitem__(self, flag):
				""" Iterate over occurences of flag in the entry,
					returning them in the order of occurence. """
				return self.DynamicPackageFlags(flag, parent = self)

		def __init__(self, path):
			self.path = path
			f = codecs.open(path, 'r', 'utf8')
			for l in f:
				try:
					e = self.PackageEntry(l)
				except self.InvalidPackageEntry:
					e = self.Whitespace(l)
				self.append(e)
			f.close()

		@property
		def modified(self):
			for e in self:
				if e.modified:
					return True
			return False

		def write(self):
			if not self.modified:
				return

			f = codecs.open(self.path, 'w', 'utf8')
			for l in self:
				f.write(l.toString())
			f.close()

			for e in self:
				e.modified = False

	def __init__(self, path):
		self.files = []
		if os.path.isdir(path):
			files = sorted(glob.glob(os.path.join(path, '*')))
		else:
			files = [path]

		for path in files:
			self.files.append(self.PackageFile(path))

	def write(self):
		for f in self.files:
			f.write()

	class DynamicPackageEntries(object):
		""" A class representing a set of package.* file entries. """
		def __init__(self, pkg = None, parent = None):
			self.parent = parent
			self.pkg = pkg

		def __iter__(self):
			for f in reversed(self.parent.files):
				for e in reversed(f):
					if not isinstance(e, f.PackageEntry):
						continue
					if self.pkg is None or e.package == self.pkg:
						yield e

	def append(self, pkg):
		f = self.files[-1]
		if not isinstance(pkg, f.PackageEntry):
			pkg = f.PackageEntry(pkg)
		pkg.modified = True
		f.append(pkg)
		return pkg

	def __iter__(self):
		""" Iterate over package entries. """
		return self.DynamicPackageEntries(parent = self)

	def __getitem__(self, pkg):
		""" Get package entries for a package in order of occurence
			(the last declarations are effective). """
		return self.DynamicPackageEntries(pkg, parent = self)

class FlagCache:
	def __init__(self, dbapi):
		self.dbapi = dbapi
		self.cache = {}

	@property
	def glob(self):
		if None not in self.cache:
			flags = set()
			for r in self.dbapi.porttrees:
				try:
					f = open(os.path.join(r, 'profiles', 'use.desc'), 'r')
				except IOError:
					pass
				else:
					for l in f:
						ll = l.split(' - ', 1)
						if len(ll) > 1:
							flags.add(ll[0])
					f.close()
			self.cache[None] = flags
			
		return self.cache[None]

	def __getitem__(self, k):
		if k not in self.cache:
			flags = set()
			# get widest match possible to make sure we do not complain without a reason
			for p in self.dbapi.xmatch('match-all', k):
				flags |= set([x.lstrip('+') for x in self.dbapi.aux_get(p, ('IUSE',))[0].split()])
			self.cache[k] = flags
		return self.cache[k]

class Action(object):
	class _argopt(object):
		def __init__(self, arg, key, flagcache = None):
			self.args = [arg]

#			if not pkgs:
#				if arg not in flagcache.glob:
#					print('Warning: %s seems to be an incorrect global flag' % arg)
#			else:
#				for p in pkgs:
#					if arg not in flagcache[p]:
#						print('Warning: %s seems to be an incorrect flag for %s' % (arg, p))

		def append(self, arg):
			self.args.append(arg)

	class _argreq(_argopt):
		def __init__(self, arg, key, *args, **kwargs):
			if not arg:
				raise ParserError('%s action requires an argument!' % key)

			newargs = (self, arg, key) + args
			Action._argopt.__init__(*newargs, **kwargs)

	class EffectiveEntryOp(object):
		def grab_effective_entry(self, p, arg, f, rw = False):
			entries = f[p]
			for pe in entries:
				flags = pe[arg]
				for f in flags:
					if rw:
						pe.modified = True
					return f
			else:
				if not rw:
					return None
				# No matching flag found. Try to append to the last
				# package entry if there's one. Otherwise, append
				# a new entry.
				for pe in entries:
					return pe.append(arg)
				else:
					return f.append(p).append(arg)

	class enable(_argreq, EffectiveEntryOp):
		def __call__(self, pkgs, puse):
			for p in pkgs:
				for arg in self.args:
					f = self.grab_effective_entry(p, arg, puse, rw = True)
					f.modifier = ''

	class disable(_argreq, EffectiveEntryOp):
		def __call__(self, pkgs, puse):
			for p in pkgs:
				for arg in self.args:
					f = self.grab_effective_entry(p, arg, puse, rw = True)
					f.modifier = '-'

	class reset(_argopt):
		pass

	class output(_argopt, EffectiveEntryOp):
		def __call__(self, pkgs, puse):
			if '' in self.args:
				raise NotImplementedError('? is not implemented yet.')
			for p in pkgs:
				l = [p]
				for arg in self.args:
					f = self.grab_effective_entry(p, arg, puse)
					l.append(f.toString() if f else '?%s' % arg)

				print(' '.join(l))

	mapping = {
		'+': enable,
		'-': disable,
		'%': reset,
		'?': output
	}

	class NotAnAction(Exception):
		pass

	def __new__(cls, *args, **kwargs):
		a = args[0]
		if a[0] in cls.mapping:
			newargs = (a[1:], a[0]) + args[1:]
			return cls.mapping[a[0]](*newargs, **kwargs)
		else:
			raise cls.NotAnAction

def get_dbapi():
	ptrees = portage.create_trees()
	# XXX: support ${ROOT}
	dbapi = ptrees['/']['porttree'].dbapi

	return dbapi

class ActionSet(list):
	def __init__(self):
		list.__init__(self)
		self.pkgs = []

	def append(self, item):
		if isinstance(item, Action._argopt):
			list.append(self, item)
		elif isinstance(item, basestring):
			self.pkgs.append(item)
		else:
			raise ValueError('Incorrect type passed to ActionSet.append()')

def parse_actions(args, dbapi):
	out = []
	actset = ActionSet()

	flagcache = FlagCache(dbapi)
	for i, a in enumerate(args):
		if not a:
			continue
		try:
			try:
				a = Action(a, flagcache = flagcache)
			except Action.NotAnAction:
				if actset:
					out.append(actset)
					actset = ActionSet()
				try:
					atom = dep_expand(a, mydb = dbapi, settings = portage.settings)
				except portage.exception.AmbiguousPackageName as e:
					raise ParserError, 'ambiguous package name, matching: %s' % e
				if atom.startswith('null/'):
					raise ParserError, 'unable to determine the category (mistyped name?)'
				actset.append(atom)
			else:
				actset.append(a)
		except ParserError as e:
			raise ParserError, 'At argv[%d]=\'%s\': %s' % (i, a, e)

	if actset:
		out.append(actset)
	return out

def main(argv):
	opt = OptionParser(
			usage='%prog [options] [<global-use-actions>] [<package> <actions>] [...]',
			version='%%prog %s' % PV,
			description='Easily manipulate USE flags in make.conf and package.use.',
			add_help_option=False
	)
	opt.disable_interspersed_args()
	opt.add_option('-h', '--help', action='callback', callback=print_help,
			help = 'print help message and exit')
	(opts, args) = opt.parse_args(argv[1:])

	dbapi = get_dbapi()
	try:
		act = parse_actions(args, dbapi)
	except ParserError as e:
		print(e)
		return 1

	if not act:
		print_help(None, '', '', opt)

	# (only for testing, to be replaced by something more optimal)
	puse = PackageFileSet('/etc/portage/package.use')

	for actset in act:
		if actset.pkgs:
			for a in actset:
				a(actset.pkgs, puse)
		else:
			raise NotImplementedError('Global actions are not supported yet')

	puse.write()

	return 0

if __name__ == '__main__':
	sys.exit(main(sys.argv))
